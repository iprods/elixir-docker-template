#!/usr/bin/env bash

set -euo pipefail

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

commands_dir="${script_dir}/.dev/*"
for c in ${commands_dir}; do
  source ${c}
done

mutagen_enabled=0

function detect_mutagen_support {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    command -v mutagen >/dev/null 2>&1 && mutagen_enabled=1
  fi
}

function print_usage {
  echo "Usage: ./dev [command] [args]"
}

function show_help {
  cat  << EOF
The following commands are supported:

./dev create                # Create a new project
./dev start                 # Start the development stack
./dev stop                  # Stop the development stack
./dev rebuild               # Rebuild the images and restart the development stack
./dev clean                 # Reset the stack (including volumes and images)
./dev execute               # Run arbitrary command in a container

To get information about a single command use ./dev [command] --help
EOF
}

function maybe_show_command_help {
  if [ "${1}" == "--help" ]; then
    return
  fi
  args=${2:-noop}
  if [ "${args}" != "--help" ]; then
    return
  fi
  case ${command} in
    "create")
      print_help_for_create
      ;;
    "start"|"s")
      print_help_for_start
      ;;
    "stop"|"st")
      print_help_for_stop
      ;;
    "rebuild"|"rb")
      print_help_for_rebuild
      ;;
    "clean"|"cl")
      print_help_for_clean
      ;;
    "execute"|"e")
      print_help_for_execute
      ;;
    *) echo "No help found for '${command}'"
  esac
  exit 0
}

COMMAND_PREFIX=""
function main {
  docker_compose="docker-compose"
  detect_mutagen_support
  if [[ "${mutagen_enabled}" == "1" ]]; then
    echo "Mutagen is supported"
    docker_compose="docker-compose -f docker-compose.yml -f docker-compose.mutagen.yml"
  fi
  if [ $# -eq 0 ]; then
    local command=help
  else
    local command=${1}
  fi
  local args="${@:2}"
  maybe_show_command_help ${command} ${args}
  case ${command} in
    "--help")
      show_help
      ;;
    "create")
      run_create ${args}
      ;;
    "start"|"s")
      run_start
      ;;
    "stop"|"st")
      run_stop
      ;;
    "rebuild"|"rb")
      run_rebuild
      ;;
    "clean"|"cl")
      run_clean
      ;;
    "execute"|"e")
      run_execute ${args}
      ;;
    *) print_usage; echo; show_help
  esac
}

main $@

